apply plugin: 'com.android.library'
apply from: rootProject.file('gradle/gradle-mvn-push.gradle')

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    testBuildType "profiling"

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode Integer.parseInt(VERSION_CODE)
        versionName VERSION_NAME

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        externalNativeBuild {
            cmake {
                abiFilters 'armeabi-v7a', "arm64-v8a", "x86", "x86_64"
                arguments '-DANDROID_STL=c++_shared'
            }
        }
    }
    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            jniDebuggable false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            consumerProguardFiles 'proguard-customer.pro'
        }
        debug {
            jniDebuggable true
            debuggable true
        }
        profiling {
            initWith debug
            externalNativeBuild {
                cmake {
                    arguments "-DCMAKE_BUILD_TYPE=Release"//, '-DCMAKE_VERBOSE_MAKEFILE=1'
                }
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    resourcePrefix "wocr_"
}

dependencies {
    implementation 'com.android.support:support-v4:28.0.0'
    androidTestImplementation "com.android.support.test.espresso:espresso-core:$rootProject.ext.espressoVersion"
    implementation "com.android.support:appcompat-v7:$rootProject.ext.supportLibVersion"
    implementation "com.facebook.device.yearclass:yearclass:$rootProject.ext.yearclassVersion"

    testImplementation "junit:junit:$rootProject.ext.junitVersion"
}

afterEvaluate { project ->
    android.libraryVariants.all { variant ->
        tasks.androidJavadocs.doFirst {
            include '**/cards/pay/paycardsrecognizer/sdk/*.java'
            options.encoding = "utf-8"
            options.charSet = "utf-8"
            options.showFromPublic()
            failOnError false
        }
    }
}

ext {
    bintrayRepo = 'PayCards-Tap-Android' // Repo name in bintray dashboard
    bintrayName = 'cards.pay.tap.android' // package name of the bintray repo

    publishedGroupId = 'company.tap'   // this is the ID we want to see in implementation line
    libraryName = 'sdk'     // this is the module name of library
    artifact = 'PayCards-Tap-Android'        // this is the artifact we want to see in implementation line

    libraryDescription = 'Fork from Pay.Cards with inline view fragment' // description of library

    siteUrl = 'https://github.com/Tap-Payments/PayCards-Tap-Android'    // git repo url
    gitUrl = 'https://github.com/Tap-Payments/PayCards-Tap-Android.git' // git repo vcs url

    libraryVersion = '0.1.1'      // library version

    developerId = 'mario-gamal'                // This is your bintray username
    developerName = 'Mario Gamal'              // Developer's name
    developerEmail = 'm.gamal@tap.company'                // Developer's email

    licenseName = 'The Apache Software License, Version 2.0'  // for example, The Apache Software License, Version 2.0
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'   // for example, http://www.apache.org/licenses/LICENSE-2.0.txt
    allLicenses = ["Apache-2.0"]    // array of licenses, for example, ["Apache-2.0"]
}

apply from: 'publish.gradle'
